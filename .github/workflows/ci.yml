name: CI

on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:
    branches-ignore:
      - gh-pages
  schedule:
    - cron: 0 0 * * *

jobs:
  cargo-audit:
    if: github.event_name != 'schedule'

    runs-on: ubuntu-latest

    steps:
      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
      - name: Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/cargo-audit
          key: cargo-audit
      - name: Install cargo-audit
        id: install
        run: cargo -v install cargo-audit
      - name: Checkout
        uses: actions/checkout@v2
      - name: Audit
        # Ignore net2 deprecation, only used by examples
        # Ignore spin deprecation, only used by examples
        run: |
          cargo audit -D \
          --ignore RUSTSEC-2020-0016 \
          --ignore RUSTSEC-2019-0031

  prettier:
    if: github.event_name != 'schedule'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Prettier
        run: npm install --no-save prettier prettier-plugin-toml
      - name: Prettier
        run: npx prettier -l .

  ci:
    if: github.event_name != 'schedule'

    strategy:
      fail-fast: false
      matrix:
        rust:
          - { channel: stable, continue-on-error: false, feature: "" }
          - { channel: beta, continue-on-error: false, feature: "" }
          - {
              channel: nightly,
              continue-on-error: true,
              feature: --features nightly,
            }
        feature:
          - {
              name:
                "--no-default-features --features
                backend-default,custom-transport",
              default-transport: false,
              custom-transport: true,
            }
          - { name: "", default-transport: true, custom-transport: false }
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    runs-on: ${{ matrix.os }}

    env:
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      SENTRY_TOKEN: ${{ secrets.SENTRY_TOKEN }}

    steps:
      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust.channel }}
          components: rustfmt, clippy
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install curl
        if: matrix.os == 'ubuntu-latest' && matrix.feature.default-transport
        run: |
          sudo apt update
          sudo apt install libcurl4-openssl-dev
      - name: Get sentry-native commit
        id: sentry_native
        run:
          echo "::set-output name=version::$(git submodule status | cut -d ' '
          -f 2)"
      - name: Cache sentry-native
        uses: actions/cache@v2
        with:
          path: ~/sentry-native
          key:
            ${{ runner.os }}-${{ steps.sentry_native.outputs.version }}-${{
            matrix.feature.default-transport }}
      - name: Set SENTRY_NATIVE_INSTALL
        run: echo "::set-env name=SENTRY_NATIVE_INSTALL::$HOME/sentry-native"
      - name: Build
        id: build
        run:
          cargo -v build ${{ matrix.feature.name }} ${{ matrix.rust.feature }}
      - name: Clippy
        if: always() && steps.build.outcome == 'success'
        run:
          cargo clippy -v ${{ matrix.feature.name }} ${{ matrix.rust.feature }}
          -- -F warnings
      - name: Documentation
        if: always() && steps.build.outcome == 'success'
        env:
          RUSTDOCFLAGS: -F warnings
        run:
          cargo -v doc --no-deps --document-private-items --workspace ${{
          matrix.feature.name }} ${{ matrix.rust.feature }}
      - name: Clippy tests
        if: always() && steps.build.outcome == 'success'
        run:
          cargo clippy -v --all-targets --features test ${{ matrix.feature.name
          }} ${{ matrix.rust.feature }} -- -F warnings
      - name: Documentation tests
        if: always() && steps.build.outcome == 'success'
        env:
          RUSTDOCFLAGS: -F warnings
        run:
          cargo -v doc --no-deps --document-private-items --workspace --features
          test ${{ matrix.feature.name }} ${{ matrix.rust.feature }}
      - name: Test
        if: always() && steps.build.outcome == 'success'
        run:
          cargo -v test --features test ${{ matrix.feature.name }} ${{
          matrix.rust.feature }}
      - name: Example
        if:
          always() && steps.build.outcome == 'success' &&
          matrix.feature.default-transport
        run:
          cargo -v run --example example --features test ${{ matrix.feature.name
          }} ${{ matrix.rust.feature }}
      - name: Custom transport example
        if:
          always() && steps.build.outcome == 'success' &&
          matrix.feature.custom-transport
        run:
          cargo -v run --example custom-transport --features test ${{
          matrix.feature.name }} ${{ matrix.rust.feature }}
      - name: Rust Formatting
        if: always() && steps.checkout.outcome == 'success'
        continue-on-error: ${{ matrix.rust.continue-on-error }}
        run: cargo fmt -v -- --check

  schedule-cargo-audit:
    if: github.event_name == 'schedule'

    strategy:
      fail-fast: false
      matrix:
        branch:
          - master
          - release

    runs-on: ubuntu-latest

    steps:
      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
      - name: Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/cargo-audit
          key: cargo-audit
      - name: Install cargo-audit
        id: install
        run: cargo -v install cargo-audit
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branch }}
      - name: Audit
        # Ignore net2 deprecation, only used by examples
        # Ignore spin deprecation, only used by examples
        run: |
          cargo audit -D \
          --ignore RUSTSEC-2020-0016 \
          --ignore RUSTSEC-2019-0031

  schedule-prettier:
    if: github.event_name == 'schedule'

    strategy:
      fail-fast: false
      matrix:
        branch:
          - master
          - release

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branch }}
      - name: Install Prettier
        run: npm install --no-save prettier prettier-plugin-toml
      - name: Prettier
        run: npx prettier -l .

  schedule-ci:
    if: github.event_name == 'schedule'

    strategy:
      fail-fast: false
      matrix:
        rust:
          - { channel: stable, continue-on-error: false, feature: "" }
          - { channel: beta, continue-on-error: false, feature: "" }
          - {
              channel: nightly,
              continue-on-error: true,
              feature: --features nightly,
            }
        feature:
          - {
              name:
                "--no-default-features --features
                backend-default,custom-transport",
              default-transport: false,
              custom-transport: true,
            }
          - { name: "", default-transport: true, custom-transport: false }
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        branch:
          - master
          - release

    runs-on: ${{ matrix.os }}

    env:
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      SENTRY_TOKEN: ${{ secrets.SENTRY_TOKEN }}

    steps:
      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust.channel }}
          components: rustfmt, clippy
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branch }}
          submodules: recursive
      - name: Install curl
        if: matrix.os == 'ubuntu-latest' && matrix.feature.default-transport
        run: |
          sudo apt update
          sudo apt install libcurl4-openssl-dev
      - name: Get sentry-native commit
        id: sentry_native
        run:
          echo "::set-output name=version::$(git submodule status | cut -d ' '
          -f 2)"
      - name: Cache sentry-native
        uses: actions/cache@v2
        with:
          path: ~/sentry-native
          key:
            ${{ runner.os }}-${{ steps.sentry_native.outputs.version }}-${{
            matrix.feature.default-transport }}
      - name: Set SENTRY_NATIVE_INSTALL
        run: echo "::set-env name=SENTRY_NATIVE_INSTALL::$HOME/sentry-native"
      - name: Build
        id: build
        run:
          cargo -v build ${{ matrix.feature.name }} ${{ matrix.rust.feature }}
      - name: Clippy
        if: always() && steps.build.outcome == 'success'
        run:
          cargo clippy -v ${{ matrix.feature.name }} ${{ matrix.rust.feature }}
          -- -F warnings
      - name: Documentation
        if: always() && steps.build.outcome == 'success'
        env:
          RUSTDOCFLAGS: -F warnings
        run:
          cargo -v doc --no-deps --document-private-items --workspace ${{
          matrix.feature.name }} ${{ matrix.rust.feature }}
      - name: Clippy tests
        if: always() && steps.build.outcome == 'success'
        run:
          cargo clippy -v --all-targets --features test ${{ matrix.feature.name
          }} ${{ matrix.rust.feature }} -- -F warnings
      - name: Documentation tests
        if: always() && steps.build.outcome == 'success'
        env:
          RUSTDOCFLAGS: -F warnings
        run:
          cargo -v doc --no-deps --document-private-items --workspace --features
          test ${{ matrix.feature.name }} ${{ matrix.rust.feature }}
      - name: Test
        if: always() && steps.build.outcome == 'success'
        run:
          cargo -v test --features test ${{ matrix.feature.name }} ${{
          matrix.rust.feature }}
      - name: Example
        if:
          always() && steps.build.outcome == 'success' &&
          matrix.feature.default-transport
        run:
          cargo -v run --example example --features test ${{ matrix.feature.name
          }} ${{ matrix.rust.feature }}
      - name: Custom transport example
        if:
          always() && steps.build.outcome == 'success' &&
          matrix.feature.custom-transport
        run:
          cargo -v run --example custom-transport --features test ${{
          matrix.feature.name }} ${{ matrix.rust.feature }}
      - name: Rust Formatting
        if: always() && steps.checkout.outcome == 'success'
        continue-on-error: ${{ matrix.rust.continue-on-error }}
        run: cargo fmt -v -- --check
